@model E_Commerce.Models.Product

@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    List<int> categoryList = new List<int>();
    var dict = new Dictionary<string, string[]>();
    if (TempData["ProductError"] != null)
    {
        dict = (Dictionary<string, string[]>)TempData["ProductError"];
    }

}
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<form enctype="multipart/form-data" id="friendform" onsubmit="return getvalue()">

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <label for="dropDownId" class="control-label col-md-2"> Select Category </label>

            <div class="col-md-7">
                <select class="form-control custom-select2" id="category" name="cate">
                    @foreach (var item in ViewData["MainCatagories"] as IList<E_Commerce.Models.MainCategory>)
                    {
                        if (item.SubCatetories.Count > 0)
                        {
                            if (item.Category_name == "Sale")
                            {
                                continue;
                            }
                            <optgroup label="@item.Category_name" class="maincate">
                                @foreach (var item2 in item.SubCatetories)
                                {
                                    if (item2.FinalSubCategories.Count > 0)
                                    {
                                        if (item2.SubCategory_name == "New In")
                                        {
                                            continue;
                                        }

                                        <optgroup label="&nbsp;&nbsp;&nbsp;&nbsp;@item2.SubCategory_name">
                                            @foreach (var item3 in item2.FinalSubCategories)
                                            {
                                                <option value="f @item3.FinalSubCate_id">@item3.FinalSubCate_name</option>
                                            }
                                        </optgroup>
                                    }
                                    else
                                    {
                                        <option value="s @item2.SubCategory_id">@item2.SubCategory_name</option>
                                    }

                                }


                            </optgroup>
                        }
                        else
                        {
                            <option value="m @item.Category_id">@item.Category_name</option>
                        }


                    }
                </select>

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SizeCategory, "SizeCategory", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                <select name="SizeCategory" class="form-control" id="sizecategory">
                    <option value="dress">Dress</option>
                    <option value="shoe">Shoes</option>
                    <option value="pant">Pants</option>
                    <option value="other">others</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Product_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product_name, "", new { @class = "text-danger stopsubmit" })

                @if (Session["errorm"] != null)
                {
                    var d = Session["errorm"].ToString();
                    var c = d;
                    <label style="color:red">@Session["errorm"].ToString()</label>
                    Session["errorm"] = null;

                }

                @if (dict.Count > 0 && dict.ContainsKey("Product_name"))
                {
                    <p class="text-danger">@dict["Product_name"][0]</p>
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger stopsubmit" })
                @if (dict.Count > 0 && dict.ContainsKey("Description"))
                {
                    <p class="text-danger">@dict["Description"][0]</p>
                }
            </div>

        </div>


        <div class="form-group hideableinput">

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control pricefield" } })
                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger stopsubmit" })
                <div class="container priceerror"></div>
                @if (dict.Count > 0 && dict.ContainsKey("UnitPrice"))
                {
                    <p class="text-danger">@dict["UnitPrice"][0]</p>
                }
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageFile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                <input class="form-control-file" type="file" name="files" accept="image/*" multiple required />
                @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger stopsubmit" })
                @if (dict.Count > 0 && dict.ContainsKey("ImageFile"))
                {
                    <p class="text-danger">@dict["ImageFile"][0]</p>
                }
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control costvalidation" } })
                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger stopsubmit" })
                <div class="container priceerror"></div>
                @if (dict.Count > 0 && dict.ContainsKey("Cost"))
                {
                    <p class="text-danger">@dict["Cost"][0]</p>
                }
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>


<script>
    $(".onhandvalidate").change(function () {
        var value = $(".onhandvalidate").val();

        if (value.length < 1) {
            $(".onhanderror").empty();
            $(".onhanderror").append(`<p style="color:red" class="stopsubmit">OnHand field is required</p>`);
        } else if (isNaN(value)) {
            $(".onhanderror").empty();
            $(".onhanderror").append(`<p style="color:red" class="stopsubmit">OnHand value must be number</p>`);
        } else if ((parseInt(value)) < 1 || (parseInt(value)) > 500) {
            $(".onhanderror").empty();
            $(".onhanderror").append(`<p style="color:red" class="stopsubmit">OnHand value must be between 1 to 500</p>`);
        } else {
            $(".onhanderror").empty();
        }
    });
    $("#sizecategory").change(function () {

        var value = $("#sizecategory").val();

        if (value == "other") {

            $(".hideableinput").append(`@Html.LabelFor(model => model.OnHand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.OnHand, new { htmlAttributes = new { @class = "form-control onhandvalidate" } })
                <div class="container onhanderror"></div>
            </div>`);
        } else {
            $(".hideableinput").empty();
        }
    });
    $(".costvalidation").change(function () {
        if ((Number)($(".costvalidation").val()) >= (((Number)($(".pricefield").val()))*0.5)) {
            $(".priceerror").empty();
            $(".priceerror").append(`<p class="stopsubmit" style="color:red">Cost amount should be smaller than half of unit price</p>`);
        } else {
            $(".priceerror").empty();
        }
    });

    $(".pricefield").change(function () {
        if ((Number)($(".costvalidation").val()) >= (((Number)($(".pricefield").val())) * 0.5)) {
            $(".priceerror").empty();
            $(".priceerror").append(`<p class="stopsubmit" style="color:red">Cost amount should be smaller than half of unit price</p>`);
        } else {
            $(".priceerror").empty();
        }
    });

    function getvalue() {
       
        if ((Number)($(".costvalidation").val()) >= (((Number)($(".pricefield").val())) * 0.5)) {
           
            $(".priceerror").empty();
            $(".priceerror").append(`<p class="stopsubmit" style="color:red">Cost amount should be smaller than half of unit price</p>`);
        } else {
           
            $(".priceerror").empty();
        }

     

        if ((Number)($(".costvalidation").val()) >= (((Number)($(".pricefield").val())) * 0.5)) {
            
            $(".priceerror").empty();
            $(".priceerror").append(`<p class="stopsubmit" style="color:red">Cost amount should be smaller than half of unit price</p>`);
        } else {
          
            $(".priceerror").empty();
        }
       
        if ($(".onhandvalidate").length > 0) {
            if ($(".onhandvalidate").val().length < 1) {
                
                $(".onhanderror").empty();
                $(".onhanderror").append(`<p style="color:red" class="stopsubmit">OnHand field is required</p>`);
            }
        }
        
     
        if ($(".stopsubmit").length > 0 && !$(".stopsubmit").is(':empty')) {
            
            return false;
        }
        else {
            
        var selected = $('#category').val();
        var valdata = new FormData($('form').get(0));
        if (selected[0] === "s") {
            selected = selected.substring(2);
            valdata.append("SubCategoryID", selected);
        } else if (selected[0] === "m") {
            selected = selected.substring(2);
            valdata.append("CategoryID", selected);
        } else {
            selected = selected.substring(2);
            valdata.append("FinalSubCategoryID", selected);
            }
           

        $.ajax({
            url: '@Url.Action("AddProduct", "Admin")',
            type: 'POST',
            data: valdata,
            cache: false,
            processData: false,
            contentType: false,
            success: function (color) {
            
            },
            error: function () {
                alert('Error occured');
            }
        }).done(function (data) {
       
            window.location.replace(data.newUrl);
                });
            
        }
      
        return false;
    }
</script>
